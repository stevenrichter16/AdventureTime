// <auto-generated />
using System;
using AdventureTime.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdventureTime.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdventureTime.Application.Models.EpisodeAnalysisEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AnalysisSource")
                        .HasColumnType("text");

                    b.Property<string>("AnalysisVersion")
                        .HasColumnType("text");

                    b.Property<string>("CharacterMoodsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<double>("ComplexityScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DominantEmotion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<double>("IntensityScore")
                        .HasColumnType("double precision");

                    b.Property<string>("KeyMomentsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<double>("PositivityScore")
                        .HasColumnType("double precision");

                    b.Property<string>("RelationshipDynamicsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("SentimentJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("StoryArcJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ThemesJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DominantEmotion")
                        .HasDatabaseName("IX_EpisodeAnalysis_Emotion");

                    b.HasIndex("EpisodeId")
                        .HasDatabaseName("IX_EpisodeAnalysis_EpisodeId");

                    b.HasIndex("IntensityScore", "PositivityScore")
                        .HasDatabaseName("IX_EpisodeAnalysis_Scores");

                    b.ToTable("EpisodeAnalyses");
                });

            modelBuilder.Entity("AdventureTime.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AirDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DialogueLineCount")
                        .HasColumnType("integer");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer");

                    b.Property<string>("FocusCharacter")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Locations")
                        .HasColumnType("jsonb");

                    b.Property<string>("MajorCharacters")
                        .HasColumnType("jsonb");

                    b.Property<string>("MinorCharacters")
                        .HasColumnType("jsonb");

                    b.Property<string>("Plot")
                        .HasColumnType("text");

                    b.Property<string>("ProductionCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double>("RuntimeMinutes")
                        .HasColumnType("double precision");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<string>("Synopsis")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TranscriptText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Season", "EpisodeNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Episode_Season_Number");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("AdventureTime.Application.Models.EpisodeAnalysisEntity", b =>
                {
                    b.HasOne("AdventureTime.Models.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });
#pragma warning restore 612, 618
        }
    }
}
