version: '3.8'

services:
  # PostgreSQL database for Adventure Time data
  postgres:
    image: postgres:15-alpine
    container_name: adventuretime-postgres
    environment:
      # These environment variables configure PostgreSQL
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: adventuretime
    ports:
      # Map PostgreSQL port to your Mac
      - "5432:5432"
    volumes:
      # Persist data even when container stops
      # This creates a named volume that Docker manages
      - adventuretime-data:/var/lib/postgresql/data
    healthcheck:
      # This ensures PostgreSQL is ready before other services try to connect
      test: ["CMD-SHELL", "pg_isready -U admin -d adventuretime"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - adventuretime-network

  # Your .NET Adventure Time API
  api:
    # Build from the Dockerfile in the current directory
    build:
      context: .
      dockerfile: Dockerfile
    container_name: adventuretime-api
    depends_on:
      postgres:
        # Wait for postgres to be healthy before starting
        condition: service_healthy
    environment:
      # Override the connection string to use the container network
      # 'postgres' here refers to the service name above, which Docker DNS resolves
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=adventuretime;Username=admin;Password=admin
      - ASPNETCORE_ENVIRONMENT=Development
      - Anthropic__ApiKey=${ANTHROPIC_API_KEY}
      - OpenAi__ApiKey=${OPENAI_API_KEY}
      
      # Override the URLs to bind to all interfaces on port 8080
      - ASPNETCORE_URLS=http://+:8080
      
      # Enable detailed errors for development (remove in production)
      - ASPNETCORE_DETAILEDERRORS=true
      
      # Logging configuration
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
      - Logging__LogLevel__Microsoft.EntityFrameworkCore=Information
    ports:
      # Map container port 8080 to host port 5256 (matching your launchSettings)
      - "5256:8080"
    volumes:
      # Mount the episodes JSON file if you need it accessible
      - ./AdventureTime/Episodes:/app/Episodes:ro
      
      # For development, you might want to mount your source code
      # This allows hot reload, but comment out for production
      # - ./:/src:cached
    networks:
      - adventuretime-network
    restart: unless-stopped
    # Resource limits - adjust based on your needs
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Optional: Add a reverse proxy for production
  # nginx:
  #   image: nginx:alpine
  #   container_name: adventuretime-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - api
  #   networks:
  #     - adventuretime-network

volumes:
  # This named volume persists your database data
  adventuretime-data:
    driver: local

networks:
  # Custom network for service communication
  adventuretime-network:
    driver: bridge